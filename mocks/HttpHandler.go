// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HttpHandler is an autogenerated mock type for the HttpHandler type
type HttpHandler struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, url, i, output
func (_m *HttpHandler) Get(ctx context.Context, url string, i interface{}, output interface{}) (int, error) {
	ret := _m.Called(ctx, url, i, output)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) (int, error)); ok {
		return rf(ctx, url, i, output)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) int); ok {
		r0 = rf(ctx, url, i, output)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, url, i, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, url, i, output
func (_m *HttpHandler) Post(ctx context.Context, url string, i interface{}, output interface{}) (int, error) {
	ret := _m.Called(ctx, url, i, output)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) (int, error)); ok {
		return rf(ctx, url, i, output)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) int); ok {
		r0 = rf(ctx, url, i, output)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, url, i, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request provides a mock function with given fields: ctx, method, url, i, output
func (_m *HttpHandler) Request(ctx context.Context, method string, url string, i interface{}, output interface{}) (int, error) {
	ret := _m.Called(ctx, method, url, i, output)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) (int, error)); ok {
		return rf(ctx, method, url, i, output)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) int); ok {
		r0 = rf(ctx, method, url, i, output)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, method, url, i, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHttpHandler creates a new instance of HttpHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpHandler {
	mock := &HttpHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
